import telebot
from telebot import types

API_TOKEN = "5658948785:AAGOBJfD3veVdc_dwCTRA0T0jB6QN0q5j-I"

bot = telebot.TeleBot(API_TOKEN)

bot.set_my_commands([
    telebot.types.BotCommand("/start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    # telebot.types.BotCommand("/AI break", "–ó–∞–ø—É—Å–∫ –∏—Å–∫—É—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–µ–∫—Ç–∞")
    ])

text_main_menu = 'üî• –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞—â–∏—Ç–Ω–∏–∫ –æ—Ç –ø–æ–∂–∞—Ä–∞! üî• \n\n–ú–æ—è —Ü–µ–ª—å - –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç—É —Ç–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∏ –±—ã—Ç–∞, –ø—Ä–µ–¥–ª–∞–≥–∞—è —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ß—Ç–æ –±—ã —Ç—ã –Ω–∏ –∏—Å–∫–∞–ª - —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ. \n\n–° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å: \nüîπ –ü–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç—å–∏ –æ –ø–æ–∂–∞—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. \nüîπ –ü–æ–ª—É—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. \nüîπ –û—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. \nüîπ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –∏ —Å–∫–∏–¥–∫–∞—Ö. \n\n–ù–µ —Ç—Ä–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ‚Äì –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤ —Ä–µ—à–µ–Ω–∏–∏ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∂–∞—Ä–Ω–æ–π –∑–∞—â–∏—Ç–æ–π. –î–æ–≤–µ—Ä—å —Å–≤–æ—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—É! –°–æ –º–Ω–æ–π —Ç—ã –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –≤ –Ω–∞–¥–µ–∂–Ω—ã—Ö —Ä—É–∫–∞—Ö. \n\n–ü–æ–µ—Ö–∞–ª–∏! üöÄ'

text_news = {'news1': 'wildfire', 'news2': 'laws', 'news3': 'fireman', 'news4': 'random'}
text_order = {'order1': 'status', 'order2': 'repeat', 'order3': 'seller', 'order4': 'money_back', 'order5': 'another'}
text_recomendation = {'rec1': 'recomendation1', 'rec2': 'recomendation2', 'rec3': 'recomendation3'}
text_catalog = {'catalog1': 'extinguisher', 'catalog2': 'fire_cranes', 'catalog3': 'fire_inventory', 'catalog4': 'bedspreads', 'catalog5': 'fire_cabinets', 'catalog6': 'fire_shields'}
text_sales = {'sales1': 'product_promotions', 'sales2': 'promotions_services'}
prev_step = ['back_to_start', 'second_option']

def start_markup():
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton('–ú–æ–π –∑–∞–∫–∞–∑', callback_data='order_question') 
    item2 = types.InlineKeyboardButton('–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏', callback_data='news_question')
    item3 = types.InlineKeyboardButton('–ö–∞—Ç–∞–ª–æ–≥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', callback_data='catalog_question')
    item4 = types.InlineKeyboardButton('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', callback_data='recomendation_question')
    item5 = types.InlineKeyboardButton('–°–∫–∏–¥–∫–∏ –∏ –∞–∫—Ü–∏–∏', callback_data='discounts_promotions_questions')
    item6 = types.InlineKeyboardButton('–ú–∏–Ω–∏-–∏–≥—Ä–∞', callback_data='game_questions')
    markup.add(item1, item2, item3, item4, item5, item6)
    return markup


def news_markup():
    markup = types.InlineKeyboardMarkup(row_width=4)
    item1 = types.InlineKeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ –ø–æ–∂–∞—Ä—ã', callback_data=text_news.get('news1'))
    item2 = types.InlineKeyboardButton('–ù–æ–≤—ã–µ –∑–∞–∫–æ–Ω—ã', callback_data=text_news.get('news2'))
    item3 = types.InlineKeyboardButton('"–í –º–∏—Ä–µ –ø–æ–∂–∞—Ä–Ω–∏–∫–æ–≤"', callback_data=text_news.get('news3'))
    item4 = types.InlineKeyboardButton('–°–ª—É—á–∞–π–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å', callback_data=text_news.get('news4'))
    item5 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    item6 = types.InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_start')
    markup.add(item1, item2, item3, item4, item5, item6)
    return markup


def order_markup():
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', callback_data=text_order.get('order1'))
    item2 = types.InlineKeyboardButton('–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=text_order.get('order2'))
    item3 = types.InlineKeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º', callback_data=text_order.get('order3'))
    item4 = types.InlineKeyboardButton('–û—Ñ–æ—Ä–º–∏—Ç—å –≤–æ–∑–≤—Ä–∞—Ç', callback_data=text_order.get('order4'))
    item5 = types.InlineKeyboardButton('–î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å', callback_data=text_order.get('order5'))
    item6 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    item7 = types.InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_start')
    markup.add(item1, item2, item3, item4, item5, item6, item7)
    return markup



def catalog_markup():
    markup = types.InlineKeyboardMarkup(row_width=3)
    item1 = types.InlineKeyboardButton('–û–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª–∏', callback_data=text_catalog.get('catalog1'))
    item2 = types.InlineKeyboardButton('–ü–æ–∂–∞—Ä–Ω—ã–µ –∫—Ä–∞–Ω—ã  ', callback_data=text_catalog.get('catalog2'))
    item3 = types.InlineKeyboardButton('–ü–æ–∂–∞—Ä–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å', callback_data=text_catalog.get('catalog3'))
    item4 = types.InlineKeyboardButton('–ü–æ–∫—Ä—ã–≤–∞–ª–∞', callback_data=text_catalog.get('catalog4'))
    item5 = types.InlineKeyboardButton('–ü–æ–∂–∞—Ä–Ω—ã–µ —à–∫–∞—Ñ—ã', callback_data=text_catalog.get('catalog5'))
    item6 = types.InlineKeyboardButton('–ü–æ–∂–∞—Ä–Ω—ã–µ —â–∏—Ç—ã', callback_data=text_catalog.get('catalog6'))
    item7 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    item8 = types.InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_start')
    markup.add(item1, item2, item3, item4, item5, item6, item7, item8)
    return markup


def recomendation_markup():
    markup = types.InlineKeyboardMarkup(row_width=3)
    item1 = types.InlineKeyboardButton('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ1', callback_data=text_recomendation.get('rec1'))
    item2 = types.InlineKeyboardButton('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è ‚Ññ2', callback_data=text_recomendation.get('rec2'))
    item3 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    item4 = types.InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_start')
    markup.add(item1, item2, item3, item4)
    return markup


def sales_markup():
    markup = types.InlineKeyboardMarkup(row_width=3)
    item1 = types.InlineKeyboardButton('–ê–∫—Ü–∏–∏ –ø–æ —Ç–æ–≤–∞—Ä–∞–º', callback_data=text_sales.get('sales1'))
    item2 = types.InlineKeyboardButton('–ê–∫—Ü–∏–∏ –ø–æ —É—Å–ª—É–≥–∞–º', callback_data=text_sales.get('sales2'))
    item3 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    item4 = types.InlineKeyboardButton('–ù–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='back_to_start')
    markup.add(item1, item2, item3, item4)
    return markup


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, 
                     text_main_menu, 
                     reply_markup=start_markup())

@bot.callback_query_handler(func=lambda call:True)
def callback_start(call):
    if call.message:
        if call.data == 'back':
            call.data = prev_step[0]
            print(call.data)
        if call.data == 'order_question':
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text= '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ –∑–∞–∫–∞–∑—É:', 
                                reply_markup=order_markup())
            prev_step[1] = 'order_question'
        elif call.data == 'news_question':
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text= '–û —á–µ–º –ø–æ—á–∏—Ç–∞–µ–º —Å–µ–≥–æ–¥–Ω—è: ', 
                                reply_markup=news_markup())
            prev_step[1] = 'news_question'
        elif call.data == 'catalog_question':
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text= '–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤ –º–∏—Ä–µ –ø–æ–∂–∞—Ä–Ω–æ–π-—Ç–µ—Ö–Ω–∏–∫–∏?', 
                                reply_markup=catalog_markup())
            prev_step[1] = 'catalog_question'
        elif call.data == 'recomendation_question':
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text= '–û –∫–∞–∫–∏—Ö –º–µ—Ç–æ–¥–∞—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –≤—ã –±—ã —Ö–æ—Ç–µ–ª–∏ —É–∑–Ω–∞—Ç—å?', 
                                reply_markup=recomendation_markup())
            prev_step[1] = 'recomendation_question'
        elif call.data == 'discounts_promotions_questions':
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text= '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ–º –≤–∞—à–µ–º—É –≤–Ω–∏–º–∞–Ω–∏—é —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –∞–∫—Ü–∏–π: ', 
                                reply_markup=sales_markup())
            prev_step[1] = 'discounts_promotions_questions'
        elif call.data == 'back_to_start':
            bot.edit_message_text(chat_id=call.message.chat.id, 
                                message_id=call.message.id, 
                                text= text_main_menu, 
                                reply_markup=start_markup())
            prev_step[1] = 'back_to_start'


bot.infinity_polling(timeout=10, long_polling_timeout=5)
